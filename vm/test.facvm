type Array<T>
	set: def(UInteger, T)
	get: def(UInteger) -> T
	length: Number

type Point2D
	x: Number
	y: Number

type Intersection
	comment: String
	points: Array<Point2D>

def intersectLineLine(a1: Point2D, a2: Point2D, b1: Point2D, b2: Point2D) -> Intersection
	// var ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
	$0 := b2.x - b1.x
	$1 := a1.y - b1.y
	$2 := $0 * $1

	$3 := b2.y - b1.y
	$4 := a1.x - b1.x
	$5 := $3 * $4

	ua_t := $2 - $5

	// var ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);
	$0 := a2.x - a1.x
	$1 := a1.y - b1.y
	$2 := $0 * $1

	$0 := a2.y - a1.y
	$1 := a1.x - b1.x
	$3 := $0 * $1

	ub_t := $2 - $3

	// var u_b  = (a2.x - a1.x) * (b2.y - b1.y) - (a2.y - a1.y) * (b2.x - b1.x);
	$0 := a2.x - a1.x
	$1 := b2.y - b1.y
	$2 := $0 * $1

	$0 := a2.y - a1.y
	$1 := b2.x - b1.x
	$3 := $0 * $1

	u_b := $2 - $3

	// if ( u_b != 0 )
	if u_b = 0 goto else1
	ua := ua_t / u_b
	ub := ub_t / u_b

	// if ( 0 <= ua && ua <= 1 && 0 <= ub && ub <= 1 )
	if ua < 0 goto else2
	if ua > 1 goto else2
	if ub < 0 goto else2
	if ub > 1 goto else2

	result := new Intersection
	result.comment := "Intersection"
	$0 := new Point2D
	$1 := a2.x - a1.x
	$2 := ua * $1
	$0.x := a1.x + $2
	$1 := a2.y - a1.y
	$2 := ua * $1
	$0.y := a1.y + $2

	result.set(result.length, $0)
else2
	result := new Intersection
	result.comment := "No Intersection"
	jmp end
else1
	if ua_t == 0 goto local
	if ub_t == 0 goto local
	jmp else3
local
	result := new Intersection
	result.comment := "Coincident"
	jmp end
else3
	result := new Intersection
	result.comment := "Parallel"
end
	return result
